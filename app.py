import streamlit as st
from PIL import Image
import base64

# Carregar imagem de fundo
def set_background(image_path):
    with open(image_path, "rb") as image:
        encoded_image = base64.b64encode(image.read()).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background: url(data:image/png;base64,{encoded_image});
            background-size: cover;
            background-attachment: fixed;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

set_background("DALL-E_2024-12-08_21.27.24.jpg")

# Cabe√ßalho Principal
st.markdown(
    """
    <style>
    h1, h2 {
        color: #FFC300;
        font-family: 'Arial', sans-serif;
        text-align: center;
        text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);
    }
    </style>
    """,
    unsafe_allow_html=True
)
st.title("Amadelli Interactive Dashboard")
st.markdown("### Bem-vindo ao sistema mais avan√ßado da **Amadelli Food Service**.")

# Barra de Navega√ß√£o Lateral
menu = st.sidebar.radio(
    "Menu de Navega√ß√£o",
    ["Vis√£o Geral", "Relat√≥rios", "Treinamentos", "Assistente IA", "Configura√ß√µes"]
)

# Placeholder para conte√∫do din√¢mico
placeholder = st.empty()

# Estrutura inicial das se√ß√µes
if menu == "Vis√£o Geral":
    placeholder.header("Vis√£o Geral")
    placeholder.markdown(
        """
        Explore os principais indicadores e an√°lises da empresa. 
        Visualize os gr√°ficos de desempenho e tome decis√µes estrat√©gicas.
        """
    )
elif menu == "Relat√≥rios":
    placeholder.header("Relat√≥rios")
    placeholder.markdown("Acesse relat√≥rios detalhados sobre produ√ß√£o, vendas e rastreabilidade.")

elif menu == "Treinamentos":
    placeholder.header("Treinamentos")
    placeholder.markdown("Participe de treinamentos interativos para aperfei√ßoar suas habilidades.")

elif menu == "Assistente IA":
    placeholder.header("Assistente IA")
    placeholder.markdown("Converse com a IA Amadelli para suporte instant√¢neo.")

elif menu == "Configura√ß√µes":
    placeholder.header("Configura√ß√µes")
    placeholder.markdown("Personalize sua experi√™ncia com o dashboard.")

import time
import numpy as np
import pandas as pd
import plotly.express as px

# Fun√ß√£o para anima√ß√µes simples no t√≠tulo
def animated_title():
    for _ in range(3):
        st.markdown(
            """
            <style>
            h1 {
                animation: glow 1.5s infinite;
            }
            @keyframes glow {
                0% {text-shadow: 0 0 10px #FFC300, 0 0 20px #FFC300;}
                50% {text-shadow: 0 0 20px #FF5733, 0 0 30px #FF5733;}
                100% {text-shadow: 0 0 10px #FFC300, 0 0 20px #FFC300;}
            }
            </style>
            """,
            unsafe_allow_html=True
        )
        time.sleep(0.5)

if menu == "Vis√£o Geral":
    placeholder.empty()
    animated_title()
    
    # Dados Din√¢micos para Gr√°ficos
    data = pd.DataFrame({
        "M√™s": ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio"],
        "Produ√ß√£o (ton)": [120, 130, 110, 150, 170],
        "Vendas (ton)": [100, 120, 105, 140, 160],
    })

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Produ√ß√£o Mensal")
        fig1 = px.bar(data, x="M√™s", y="Produ√ß√£o (ton)", color="M√™s", title="Produ√ß√£o por M√™s")
        st.plotly_chart(fig1, use_container_width=True)

    with col2:
        st.subheader("Vendas Mensais")
        fig2 = px.line(data, x="M√™s", y="Vendas (ton)", markers=True, title="Vendas por M√™s")
        st.plotly_chart(fig2, use_container_width=True)

    # Indicadores R√°pidos
    st.markdown("---")
    st.subheader("Indicadores R√°pidos")
    col3, col4, col5 = st.columns(3)
    col3.metric("Produ√ß√£o Atual", "170 ton", "+20 ton")
    col4.metric("Vendas Atuais", "160 ton", "+15 ton")
    col5.metric("Efici√™ncia", "94%", "+3%")

if menu == "Relat√≥rios":
    placeholder.empty()
    placeholder.markdown(
        """
        <style>
        .report-section {
            border: 2px solid #FFC300;
            padding: 20px;
            margin: 10px;
            border-radius: 10px;
            background: rgba(255, 195, 0, 0.1);
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    placeholder.markdown("<div class='report-section'><h2>Relat√≥rio Semanal</h2><p>Veja os dados mais recentes.</p></div>", unsafe_allow_html=True)

# Aguardando mais intera√ß√µes
st.markdown("---")
st.info("Navegue entre as abas laterais para explorar mais funcionalidades.")

# Adicionando se√ß√µes avan√ßadas no menu
if menu == "Treinamentos":
    st.header("üìö Treinamentos Amadelli")
    
    # Simulador de Progresso
    with st.container():
        st.subheader("Acompanhe seu progresso nos treinamentos")
        progresso = st.slider("Progresso Atual (%)", min_value=0, max_value=100, step=1)
        st.progress(progresso / 100)

        if progresso == 100:
            st.success("Parab√©ns! Voc√™ completou todos os treinamentos.")

    st.markdown("---")

    # Cat√°logo de Treinamentos
    st.subheader("Cat√°logo de Treinamentos Dispon√≠veis")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.image("https://via.placeholder.com/150", use_column_width=True)
        st.markdown("**Treinamento em Seguran√ßa**")
        st.button("Inscreva-se")

    with col2:
        st.image("https://via.placeholder.com/150", use_column_width=True)
        st.markdown("**Manuten√ß√£o Preventiva**")
        st.button("Inscreva-se")

    with col3:
        st.image("https://via.placeholder.com/150", use_column_width=True)
        st.markdown("**Boas Pr√°ticas de Produ√ß√£o**")
        st.button("Inscreva-se")

if menu == "Delli AI":
    st.header("ü§ñ Assistente de IA - Delli AI")

    # Painel de Perguntas e Respostas
    with st.form("form_pergunta"):
        pergunta = st.text_input("Fa√ßa sua pergunta para a Delli AI")
        submit = st.form_submit_button("Enviar")

        if submit and pergunta:
            resposta = f"A Delli AI est√° analisando sua pergunta: '{pergunta}'"
            st.write(resposta)
    
    st.markdown("---")

    # √Årea de Chat com Simula√ß√£o
    st.subheader("Chat Simulado com Delli AI")
    mensagens = ["Como posso melhorar minha produtividade?", "Quais s√£o os relat√≥rios dispon√≠veis?"]
    mensagens_respostas = [
        "Voc√™ pode melhorar sua produtividade priorizando tarefas e revisando metas di√°rias.",
        "Os relat√≥rios dispon√≠veis incluem Relat√≥rio Semanal, Efici√™ncia de M√°quinas, e Relat√≥rio de Produ√ß√£o Mensal.",
    ]

    for i, (msg, resp) in enumerate(zip(mensagens, mensagens_respostas)):
        st.markdown(f"**Usu√°rio:** {msg}")
        st.markdown(f"*Delli AI:* {resp}")
        if i < len(mensagens) - 1:
            st.markdown("---")

# Layout Interativo e Anima√ß√µes
def rotating_banner():
    st.markdown(
        """
        <style>
        @keyframes rotate {
            0% {transform: rotate(0deg);}
            50% {transform: rotate(180deg);}
            100% {transform: rotate(360deg);}
        }
        .rotating {
            animation: rotate 10s infinite linear;
        }
        </style>
        <div class="rotating">
            <h3 style="color:#FFC300;">Destaques da Semana: Novos Treinamentos Dispon√≠veis!</h3>
        </div>
        """,
        unsafe_allow_html=True,
    )

rotating_banner()

st.markdown("---")
st.info("Navegue por todas as se√ß√µes para explorar o app completo.")

# Se√ß√£o de Relat√≥rios Detalhados
if menu == "Relat√≥rios":
    st.header("üìä Relat√≥rios de Desempenho e Produ√ß√£o")

    # Filtro por Categoria
    st.subheader("Filtrar Relat√≥rios")
    col1, col2 = st.columns(2)

    with col1:
        categoria = st.selectbox(
            "Selecione a Categoria:",
            ["Produ√ß√£o", "Manuten√ß√£o", "Treinamentos", "Efici√™ncia de M√°quinas"],
        )

    with col2:
        periodo = st.date_input("Selecione o Per√≠odo")

    # Exibindo Relat√≥rios com Gr√°ficos Interativos
    st.markdown(f"### Relat√≥rios - {categoria} ({periodo})")
    if categoria == "Produ√ß√£o":
        st.bar_chart({"Dias": [1, 2, 3, 4, 5], "Produ√ß√£o (ton)": [10, 12, 9, 14, 11]})

    elif categoria == "Manuten√ß√£o":
        st.line_chart({"Dias": [1, 2, 3, 4, 5], "Tempo (horas)": [2, 1.5, 3, 2.5, 2]})

    elif categoria == "Treinamentos":
        st.area_chart({"Dias": [1, 2, 3, 4, 5], "Participantes": [20, 25, 22, 30, 28]})

    elif categoria == "Efici√™ncia de M√°quinas":
        st.line_chart({"Dias": [1, 2, 3, 4, 5], "Efici√™ncia (%)": [85, 90, 88, 92, 89]})

    st.markdown("---")

    # Exporta√ß√£o de Relat√≥rios
    st.subheader("Exportar Relat√≥rios")
    st.download_button(
        label="üì• Baixar Relat√≥rio em PDF",
        data="Relat√≥rio de exemplo: Desempenho da Semana",
        file_name="relatorio_desempenho.pdf",
        mime="application/pdf",
    )

# Elementos Visuais Modernos e Anima√ß√µes
def glowing_button(label, color="#FFC300", glow_color="#FFD700"):
    st.markdown(
        f"""
        <style>
        .glow-button {{
            background-color: {color};
            border: none;
            color: black;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 12px;
            box-shadow: 0 0 20px {glow_color};
            transition: box-shadow 0.3s ease-in-out;
        }}
        .glow-button:hover {{
            box-shadow: 0 0 40px {glow_color};
        }}
        </style>
        <button class="glow-button">{label}</button>
        """,
        unsafe_allow_html=True,
    )

# Bot√µes de Destaque na Tela Principal
if menu == "C√°lculo de Carga":
    st.subheader("Destaques da Tela")
    glowing_button("üîç Veja mais detalhes")
    glowing_button("üõ† Ajuste Configura√ß√µes")

# Integra√ß√µes com Dados em Tempo Real
st.sidebar.subheader("üì° Dados em Tempo Real")

# Exemplo: Indicador de Efici√™ncia
st.sidebar.metric(label="Efici√™ncia Atual", value="89%", delta="+2%")
st.sidebar.metric(label="Produ√ß√£o Hoje", value="14.2 ton", delta="-1.1 ton")

# Gr√°fico de Efici√™ncia em Tempo Real
st.sidebar.line_chart({"Tempo (horas)": [1, 2, 3, 4, 5], "Efici√™ncia (%)": [85, 86, 88, 89, 90]})

# Rodap√© com Informa√ß√µes Din√¢micas
st.markdown(
    """
    <footer style='text-align: center; padding: 10px; font-size: 14px; color: #f9e1cd;'>
        ¬© 2024 Amadelli Food Service. Todos os direitos reservados.
    </footer>
    """,
    unsafe_allow_html=True,
)

# P√°gina de Treinamentos com Elementos Visuais Din√¢micos
if menu == "Treinamentos":
    st.header("üéì Treinamentos Personalizados")

    # Anima√ß√£o de Destaque
    st.markdown(
        """
        <div style='text-align: center;'>
            <lottie-player src="https://assets9.lottiefiles.com/packages/lf20_touohxv0.json"  
                background="transparent"  
                speed="1"  
                style="width: 300px; height: 300px;"  
                loop  
                autoplay>
            </lottie-player>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # Lista de Treinamentos Dispon√≠veis
    st.subheader("üìú Lista de Treinamentos")
    treinamentos = [
        "Seguran√ßa na Produ√ß√£o",
        "Manuten√ß√£o Preventiva",
        "Treinamento de Operadores",
        "Gest√£o de Qualidade",
    ]

    for treinamento in treinamentos:
        st.write(f"‚úÖ {treinamento}")

    # M√≥dulo de Inscri√ß√£o
    st.subheader("üìÖ Inscri√ß√£o em Treinamentos")
    nome_usuario = st.text_input("Seu Nome:")
    email_usuario = st.text_input("Seu Email:")
    treinamento_selecionado = st.selectbox("Selecione um Treinamento:", treinamentos)
    if st.button("Inscrever-se"):
        st.success(f"Inscri√ß√£o realizada com sucesso em '{treinamento_selecionado}'!")

# Painel do Funcion√°rio com Gr√°ficos Interativos
if menu == "Painel do Funcion√°rio":
    st.header("üë∑ Painel do Funcion√°rio")

    # Informa√ß√µes Pessoais
    st.subheader("üìã Dados Pessoais")
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("Nome Completo", value="Jo√£o da Silva")
        st.text_input("Cargo", value="Operador de M√°quinas")
    with col2:
        st.text_input("Turno", value="Diurno")
        st.text_input("Departamento", value="Produ√ß√£o")

    # Gr√°ficos de Desempenho Individual
    st.subheader("üìà Desempenho Individual")
    desempenho_data = {
        "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai"],
        "Efici√™ncia (%)": [85, 87, 90, 92, 89],
    }
    st.line_chart(desempenho_data)

    # Progresso de Treinamento
    st.subheader("üìä Progresso de Treinamento")
    st.progress(75)

# Adicionando Fundo Animado ao App
st.markdown(
    """
    <style>
    body {
        background: linear-gradient(180deg, #040404, #1a1a1a);
        background-size: cover;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Gr√°fico em Tempo Real
st.sidebar.subheader("üìä Produ√ß√£o em Tempo Real")
import random
import time

placeholder = st.sidebar.empty()

for i in range(10):
    data = {"Produ√ß√£o": [random.randint(10, 20) for _ in range(5)]}
    placeholder.line_chart(data)
    time.sleep(0.5)

# Anima√ß√£o de Carga Finalizada
st.markdown(
    """
    <div style='text-align: center; margin-top: 20px;'>
        <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_3jwyea7w.json"  
            background="transparent"  
            speed="1"  
            style="width: 400px; height: 400px;"  
            loop  
            autoplay>
        </lottie-player>
    </div>
    """,
    unsafe_allow_html=True,
)

# Melhorias na P√°gina de Configura√ß√µes
if menu == "Configura√ß√µes":
    st.header("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    # Op√ß√µes de Tema
    st.subheader("üé® Escolha o Tema")
    tema = st.selectbox("Selecione um Tema:", ["Claro", "Escuro", "Autom√°tico"])
    if tema == "Claro":
        st.success("Tema Claro selecionado.")
    elif tema == "Escuro":
        st.success("Tema Escuro selecionado.")
    else:
        st.success("Tema Autom√°tico selecionado com base na hora do dia.")
    
    # Prefer√™ncias de Notifica√ß√µes
    st.subheader("üîî Notifica√ß√µes")
    email_notif = st.checkbox("Receber notifica√ß√µes por email")
    sms_notif = st.checkbox("Receber notifica√ß√µes por SMS")
    push_notif = st.checkbox("Receber notifica√ß√µes push")
    
    if st.button("Salvar Configura√ß√µes"):
        st.success("Configura√ß√µes salvas com sucesso!")
    
    # Seguran√ßa e Privacidade
    st.subheader("üîí Seguran√ßa e Privacidade")
    st.write("Atualize sua senha ou configure a autentica√ß√£o de dois fatores.")
    nova_senha = st.text_input("Nova Senha", type="password")
    confirmar_senha = st.text_input("Confirmar Senha", type="password")
    if st.button("Atualizar Senha"):
        if nova_senha == confirmar_senha and nova_senha != "":
            st.success("Senha atualizada com sucesso!")
        else:
            st.error("As senhas n√£o coincidem ou est√£o vazias.")
    
    # Feedback do Usu√°rio
    st.subheader("üìù Feedback")
    feedback = st.text_area("Deixe seu feedback ou sugest√£o:")
    if st.button("Enviar Feedback"):
        st.success("Obrigado pelo seu feedback!")
    
# Adicionando Anima√ß√µes com Bibliotecas Externas
st.markdown(
    """
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.4/lottie.min.js"></script>
    <div id="animation" style="width: 100%; height: 400px;"></div>
    <script>
    var animation = bodymovin.loadAnimation({
        container: document.getElementById('animation'),
        renderer: 'svg',
        loop: true,
        autoplay: true,
        path: 'https://assets4.lottiefiles.com/packages/lf20_u4yrau.json'
    })
    </script>
    """,
    unsafe_allow_html=True,
)

# Inserindo Mapas Interativos
st.header("üåç Localiza√ß√£o das Unidades Amadelli")
import folium
from streamlit_folium import st_folium

m = folium.Map(location=[-23.5505, -46.6333], zoom_start=5)

# Marcadores das Unidades
folium.Marker([-23.5505, -46.6333], popup="Unidade S√£o Paulo").add_to(m)
folium.Marker([-22.9068, -43.1729], popup="Unidade Rio de Janeiro").add_to(m)
folium.Marker([-19.9167, -43.9345], popup="Unidade Belo Horizonte").add_to(m)

# Exibindo o mapa no Streamlit
st_data = st_folium(m, width=700)

# Chatbot Integrado com Simula√ß√£o
if menu == "Assistente IA":
    st.header("ü§ñ Chatbot Amadelli - Sua Assistente Virtual")
    
    if 'mensagens' not in st.session_state:
        st.session_state['mensagens'] = []
    
    with st.form("form_chat"):
        mensagem_usuario = st.text_input("Voc√™:")
        enviar = st.form_submit_button("Enviar")
    
    if enviar and mensagem_usuario:
        st.session_state['mensagens'].append(("Voc√™", mensagem_usuario))
        # Simulando a resposta do chatbot
        resposta_chatbot = f"Desculpe, ainda estou aprendendo. Voc√™ disse: {mensagem_usuario}"
        st.session_state['mensagens'].append(("Chatbot", resposta_chatbot))
    
    # Exibindo a conversa
    for remetente, mensagem in st.session_state['mensagens']:
        if remetente == "Voc√™":
            st.markdown(f"**{remetente}:** {mensagem}")
        else:
            st.markdown(f"*{remetente}:* {mensagem}")
    
    # Op√ß√£o de limpar a conversa
    if st.button("Limpar Conversa"):
        st.session_state['mensagens'] = []

# Integra√ß√£o com Redes Sociais (Links)
st.sidebar.markdown("### üîó Siga-nos nas Redes Sociais")
st.sidebar.markdown("[Facebook](https://www.facebook.com/amadelli)")
st.sidebar.markdown("[Instagram](https://www.instagram.com/amadelli)")
st.sidebar.markdown("[LinkedIn](https://www.linkedin.com/company/amadelli)")

# Melhorias na Responsividade do App
st.markdown(
    """
    <style>
    @media only screen and (max-width: 600px) {
        .stApp {
            background-size: contain;
        }
        .sidebar-content {
            display: none;
        }
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Atualiza√ß√µes em Tempo Real com Dados Fict√≠cios
import threading

def update_metrics():
    while True:
        with st.sidebar:
            st.metric(label="Usu√°rios Online", value=f"{random.randint(50, 150)}")
            st.metric(label="Pedidos em Processamento", value=f"{random.randint(20, 80)}")
        time.sleep(5)

thread = threading.Thread(target=update_metrics)
thread.start()

# Dashboard de Relat√≥rios
if menu == "Relat√≥rios":
    st.header("üìä Relat√≥rios Gerenciais")
    st.subheader("Resumo das Opera√ß√µes")
    
    # Gr√°ficos Din√¢micos com Altair
    import altair as alt
    import pandas as pd
    import numpy as np
    
    # Dados fict√≠cios para os relat√≥rios
    data = pd.DataFrame({
        'M√™s': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
        'Produ√ß√£o (toneladas)': [50, 70, 65, 90, 100, 110],
        'Pedidos Processados': [300, 400, 450, 500, 600, 650]
    })
    
    # Gr√°fico de barras para produ√ß√£o
    bar_chart = alt.Chart(data).mark_bar().encode(
        x='M√™s',
        y='Produ√ß√£o (toneladas)',
        color=alt.value('#FFC300')
    ).properties(title="Produ√ß√£o Mensal")
    
    # Gr√°fico de linha para pedidos processados
    line_chart = alt.Chart(data).mark_line(point=True).encode(
        x='M√™s',
        y='Pedidos Processados',
        color=alt.value('#FF5733')
    ).properties(title="Pedidos Processados Mensalmente")
    
    # Exibindo os gr√°ficos
    st.altair_chart(bar_chart, use_container_width=True)
    st.altair_chart(line_chart, use_container_width=True)
    
    # Detalhes Adicionais
    st.subheader("üìÑ Relat√≥rios Espec√≠ficos")
    relatorio = st.selectbox("Selecione um Relat√≥rio:", ["Relat√≥rio de Vendas", "Relat√≥rio de Produ√ß√£o", "Relat√≥rio de Efici√™ncia"])
    
    if relatorio == "Relat√≥rio de Vendas":
        st.write("Relat√≥rio de vendas detalhado ser√° exibido aqui.")
    elif relatorio == "Relat√≥rio de Produ√ß√£o":
        st.write("Relat√≥rio de produ√ß√£o detalhado ser√° exibido aqui.")
    else:
        st.write("Relat√≥rio de efici√™ncia detalhado ser√° exibido aqui.")
    
    # Bot√£o de Download
    if st.button("üì• Baixar Relat√≥rio"):
        st.success("Relat√≥rio baixado com sucesso!")
    
# Sistema de Notifica√ß√µes ao Vivo
st.sidebar.header("üîî Notifica√ß√µes Recentes")
notificacoes = [
    "Novo pedido processado na unidade S√£o Paulo.",
    "Treinamento conclu√≠do por 10 funcion√°rios.",
    "Manuten√ß√£o programada para 15/12 na unidade Rio de Janeiro."
]

# Loop para exibir notifica√ß√µes
for notificacao in notificacoes:
    st.sidebar.markdown(f"‚úÖ {notificacao}")
    st.sidebar.markdown("---")

# Melhorias no Layout com Espa√ßamento e Bordas Suaves
st.markdown(
    """
    <style>
    .stApp {
        padding: 10px;
        border: 2px solid #FFC300;
        border-radius: 10px;
        background-image: url('DALL-E 2024-12-08 21.27.24 - A modern four-story building with a geometric facade featuring predominant tones of yellow, black, and light gray in large rectangular blocks, creatin.webp');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }
    .stSidebar {
        padding: 10px;
        border: 2px solid #FF5733;
        border-radius: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Anima√ß√µes Interativas com LottieFiles (Continua√ß√£o)
st.subheader("üé• V√≠deo de Boas-Vindas")
st.video("https://www.youtube.com/watch?v=dQw4w9WgXcQ")

# Adicionando Um Carrossel de Imagens
st.subheader("üì∑ Galeria de Imagens")
from PIL import Image

# Galeria din√¢mica
galeria = [
    ("F√°brica em S√£o Paulo", "imagem_sao_paulo.jpg"),
    ("Unidade Rio de Janeiro", "imagem_rio.jpg"),
    ("Centro de Treinamento", "imagem_treinamento.jpg")
]

for titulo, imagem in galeria:
    st.image(imagem, caption=titulo, use_column_width=True)

# Integra√ß√£o com APIs Externas (Dados do Clima)
st.subheader("üå¶Ô∏è Clima Atual nas Unidades")
import requests

def obter_clima(cidade):
    api_url = f"http://api.openweathermap.org/data/2.5/weather?q={cidade}&appid=SEU_TOKEN_AQUI&units=metric"
    resposta = requests.get(api_url).json()
    if resposta.get("main"):
        temperatura = resposta["main"]["temp"]
        descricao = resposta["weather"][0]["description"]
        return f"{temperatura}¬∞C, {descricao.capitalize()}"
    return "Dados n√£o dispon√≠veis"

# Exibindo o clima
clima_sp = obter_clima("S√£o Paulo")
clima_rj = obter_clima("Rio de Janeiro")
clima_bh = obter_clima("Belo Horizonte")

st.write(f"S√£o Paulo: {clima_sp}")
st.write(f"Rio de Janeiro: {clima_rj}")
st.write(f"Belo Horizonte: {clima_bh}")

# Painel de Controle para Configura√ß√µes Avan√ßadas
if menu == "Configura√ß√µes":
    st.header("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    # Temas de Interface
    st.subheader("üé® Personaliza√ß√£o de Tema")
    tema = st.radio(
        "Escolha um tema:",
        options=["Claro", "Escuro", "Amadelli (Padr√£o)"],
        index=2
    )
    
    if tema == "Claro":
        st.markdown(
            """
            <style>
            body { background-color: #FFFFFF; color: #000000; }
            </style>
            """,
            unsafe_allow_html=True,
        )
        st.success("Tema Claro Aplicado!")
    elif tema == "Escuro":
        st.markdown(
            """
            <style>
            body { background-color: #000000; color: #FFFFFF; }
            </style>
            """,
            unsafe_allow_html=True,
        )
        st.success("Tema Escuro Aplicado!")
    else:
        st.markdown(
            """
            <style>
            body { background-color: #040404; color: #FFC300; }
            </style>
            """,
            unsafe_allow_html=True,
        )
        st.success("Tema Amadelli Aplicado!")

    # Configura√ß√µes de Notifica√ß√µes
    st.subheader("üîî Configura√ß√µes de Notifica√ß√µes")
    ativar_notificacoes = st.checkbox("Ativar Notifica√ß√µes")
    ativar_email = st.checkbox("Ativar Notifica√ß√µes por Email")
    ativar_sms = st.checkbox("Ativar Notifica√ß√µes por SMS")

    if ativar_notificacoes:
        st.write("Notifica√ß√µes Ativadas!")
        if ativar_email:
            st.write("‚úîÔ∏è Notifica√ß√µes por Email Ativadas.")
        if ativar_sms:
            st.write("‚úîÔ∏è Notifica√ß√µes por SMS Ativadas.")

    # Atualiza√ß√µes de Sistema
    st.subheader("üîÑ Atualiza√ß√µes")
    st.write("Verificar por atualiza√ß√µes dispon√≠veis:")
    if st.button("Verificar Agora"):
        st.info("Seu sistema est√° atualizado com a vers√£o mais recente.")
    
# √Årea de Relat√≥rios Interativos com Mapas Din√¢micos
if menu == "Relat√≥rios":
    st.header("üåç Relat√≥rios Geogr√°ficos")
    
    # Criando um mapa interativo
    import folium
    from streamlit_folium import st_folium
    
    mapa = folium.Map(location=[-23.55052, -46.633308], zoom_start=5)
    folium.Marker(
        [-23.55052, -46.633308], popup="Unidade S√£o Paulo"
    ).add_to(mapa)
    folium.Marker(
        [-22.906847, -43.172896], popup="Unidade Rio de Janeiro"
    ).add_to(mapa)
    folium.Marker(
        [-19.916681, -43.934493], popup="Unidade Belo Horizonte"
    ).add_to(mapa)
    
    st_folium(mapa, width=700, height=500)

# Gr√°ficos Avan√ßados com Plotly
if menu == "Treinamentos":
    st.header("üìà An√°lise de Treinamentos")
    
    import plotly.express as px
    
    # Dados fict√≠cios de progresso nos treinamentos
    treinamento_data = pd.DataFrame({
        "Treinamento": ["Seguran√ßa", "Higiene", "Produ√ß√£o", "Lideran√ßa"],
        "Participantes": [120, 85, 100, 60],
        "Conclus√£o (%)": [90, 75, 80, 70]
    })
    
    # Gr√°fico de dispers√£o interativo
    fig = px.scatter(
        treinamento_data,
        x="Treinamento",
        y="Conclus√£o (%)",
        size="Participantes",
        color="Treinamento",
        title="Progresso nos Treinamentos",
        labels={"Treinamento": "Tipo de Treinamento", "Conclus√£o (%)": "Percentual de Conclus√£o"}
    )
    st.plotly_chart(fig)

# √Årea para Feedback dos Usu√°rios
if menu == "Delli AI":
    st.header("üí¨ Feedback dos Usu√°rios")
    st.text_area("Deixe seu feedback sobre a Delli AI:", placeholder="Escreva aqui...")
    if st.button("Enviar Feedback"):
        st.success("Obrigado pelo seu feedback!")

# Adicionando Indicadores de Progresso
st.sidebar.subheader("Progresso Geral")
st.sidebar.progress(75)  # Exemplo com 75% conclu√≠do

# Notifica√ß√µes em Tempo Real
st.sidebar.subheader("üîî Alertas Recentes")
alertas = ["Manuten√ß√£o Programada: 15/12", "Capacita√ß√£o obrigat√≥ria: 20/12"]
for alerta in alertas:
    st.sidebar.warning(alerta)

# Integra√ß√£o com Formul√°rios Google para Recrutamento
st.sidebar.subheader("üìã Cadastro para Treinamentos")
st.sidebar.write("[Clique aqui para se cadastrar](https://forms.gle/SEU_FORM_GOOGLE)")

# Painel Interativo de An√°lise de Dados
if menu == "Painel do Funcion√°rio":
    st.header("üìä Painel do Funcion√°rio")
    
    # Se√ß√£o de Pontua√ß√£o de Desempenho
    st.subheader("‚≠ê Desempenho")
    desempenho_data = {
        "Nome": ["Jo√£o Silva", "Maria Santos", "Carlos Oliveira", "Ana Paula"],
        "Pontua√ß√£o": [85, 92, 78, 88],
        "Treinamentos Conclu√≠dos": [10, 12, 8, 11],
        "Horas de Trabalho": [160, 170, 150, 165]
    }
    df_desempenho = pd.DataFrame(desempenho_data)
    st.table(df_desempenho)

    # An√°lise Interativa de Produtividade
    st.subheader("üìà An√°lise de Produtividade")
    fig = px.bar(
        df_desempenho,
        x="Nome",
        y="Pontua√ß√£o",
        color="Pontua√ß√£o",
        text="Treinamentos Conclu√≠dos",
        labels={"Pontua√ß√£o": "Desempenho (%)"},
        title="Compara√ß√£o de Desempenho"
    )
    st.plotly_chart(fig)

    # Ferramenta para Filtrar Dados
    st.subheader("üîç Filtros Avan√ßados")
    filtro_nome = st.selectbox("Selecione o Funcion√°rio:", df_desempenho["Nome"])
    funcionario_selecionado = df_desempenho[df_desempenho["Nome"] == filtro_nome]
    st.write(f"Detalhes de {filtro_nome}:")
    st.write(funcionario_selecionado)

# √Årea de Not√≠cias e Atualiza√ß√µes
st.sidebar.subheader("üì∞ Not√≠cias e Atualiza√ß√µes")
noticias = [
    "Novo treinamento dispon√≠vel: 'Gest√£o de Tempo'.",
    "Reconhecimento: Funcion√°rio do M√™s √© Maria Santos!",
    "Atualiza√ß√£o de sistema programada para 12/12."
]
for noticia in noticias:
    st.sidebar.info(noticia)

# Integra√ß√£o com Google Calendar
st.sidebar.subheader("üìÖ Pr√≥ximos Eventos")
calendario_eventos = [
    "15/12: Treinamento de Seguran√ßa",
    "20/12: Reuni√£o Geral",
    "05/01: Atualiza√ß√£o de Procedimentos"
]
for evento in calendario_eventos:
    st.sidebar.write(f"üìå {evento}")

# Adicionando Anima√ß√µes com Lottie
st.subheader("üé• Anima√ß√µes Interativas")
from streamlit_lottie import st_lottie

# Fun√ß√£o para carregar anima√ß√µes Lottie
def carregar_lottie(url):
    import requests
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# Anima√ß√£o de boas-vindas
animacao_bem_vindo = carregar_lottie("https://assets2.lottiefiles.com/packages/lf20_x62chJ.json")
st_lottie(animacao_bem_vindo, height=300, key="bem_vindo")

# Integra√ß√£o com API de Clima
st.sidebar.subheader("üå§Ô∏è Clima Atual")
cidade = st.sidebar.text_input("Digite sua cidade:", "S√£o Paulo")
if st.sidebar.button("Ver Clima"):
    # Substituir por integra√ß√£o com API real
    st.sidebar.info(f"üå°Ô∏è Clima em {cidade}: 25¬∞C, Chuva Leve")

# Gr√°ficos de Tend√™ncia com Altair
st.subheader("üìä Tend√™ncias")
import altair as alt

tendencia_data = pd.DataFrame({
    "M√™s": ["Janeiro", "Fevereiro", "Mar√ßo", "Abril"],
    "Produ√ß√£o": [1200, 1350, 1450, 1550],
    "Treinamentos": [200, 250, 300, 350]
})

fig_tendencia = alt.Chart(tendencia_data).mark_line(point=True).encode(
    x="M√™s",
    y="Produ√ß√£o",
    tooltip=["Produ√ß√£o", "Treinamentos"]
).interactive()

st.altair_chart(fig_tendencia, use_container_width=True)

# Bot√£o para Download de Relat√≥rios
st.subheader("üì• Baixe Relat√≥rios Detalhados")
if st.button("Download Relat√≥rio de Produtividade"):
    # Criando dados fict√≠cios para o relat√≥rio
    relatorio_data = pd.DataFrame({
        "Funcion√°rio": ["Jo√£o Silva", "Maria Santos", "Carlos Oliveira", "Ana Paula"],
        "Horas Trabalhadas": [160, 170, 150, 165],
        "Produtividade (%)": [85, 92, 78, 88]
    })
    csv = relatorio_data.to_csv(index=False).encode("utf-8")
    st.download_button("Baixar CSV", data=csv, file_name="relatorio_produtividade.csv")

# Notifica√ß√µes Pop-up com Streamlit Toast
st.sidebar.subheader("üì¨ Mensagens Instant√¢neas")
if st.sidebar.button("Mostrar Mensagem Importante"):
    st.sidebar.toast("‚ö†Ô∏è Aten√ß√£o: Nova pol√≠tica de seguran√ßa implementada!", duration=10)


# Integra√ß√£o com Realidade Aumentada (placeholder para futuras implementa√ß√µes)
st.subheader("üåÄ Realidade Aumentada (Em Breve)")
st.markdown("""
    Experimente visualizar dados em 3D e interagir com pain√©is din√¢micos usando tecnologias de realidade aumentada.
    Esta funcionalidade estar√° dispon√≠vel em futuras atualiza√ß√µes. Fique ligado!
""")

# Painel de Configura√ß√µes do Usu√°rio
if menu == "Configura√ß√µes":
    st.header("‚öôÔ∏è Configura√ß√µes")
    st.subheader("üë§ Perfil do Usu√°rio")
    with st.form("perfil_form"):
        nome = st.text_input("Nome Completo", value="Jo√£o da Silva")
        email = st.text_input("E-mail", value="joao.silva@amadelli.com")
        telefone = st.text_input("Telefone", value="(11) 98765-4321")
        salvar = st.form_submit_button("Salvar Altera√ß√µes")
        if salvar:
            st.success("Informa√ß√µes atualizadas com sucesso!")

    st.subheader("üåê Prefer√™ncias de Interface")
    tema = st.radio(
        "Escolha o tema:",
        options=["Claro", "Escuro", "Personalizado"],
        index=1
    )
    if tema == "Personalizado":
        cor_personalizada = st.color_picker("Selecione a cor principal:", "#e0782c")
        st.write(f"Cor escolhida: {cor_personalizada}")

# Painel de Feedback
st.sidebar.subheader("üì¢ Envie Seu Feedback")
feedback = st.sidebar.text_area("Como podemos melhorar o sistema?")
if st.sidebar.button("Enviar Feedback"):
    st.sidebar.success("Obrigado pelo seu feedback! Ele ser√° analisado pela nossa equipe.")

# Rodap√© Moderno
st.markdown("---")
st.markdown("""
    <style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #1e1e1e;
        color: #f9e1cd;
        text-align: center;
        padding: 10px 0;
    }
    </style>
    <div class="footer">
        ¬© 2024 Amadelli Food Service | Todos os direitos reservados | 
        <a href="https://amadelli.com" target="_blank" style="color: #FFC300; text-decoration: none;">Visite nosso site</a>
    </div>
""", unsafe_allow_html=True)

# Adicionando Interatividade com Gr√°ficos Din√¢micos
if menu == "Relat√≥rios":
    st.header("üìä Relat√≥rios Detalhados")
    relatorio_data = pd.DataFrame({
        "M√™s": ["Janeiro", "Fevereiro", "Mar√ßo", "Abril"],
        "Produ√ß√£o (Toneladas)": [1200, 1400, 1600, 1800],
        "Erros (Quantidade)": [10, 7, 5, 4],
    })

    st.subheader("üìà Produ√ß√£o Mensal")
    grafico_producao = alt.Chart(relatorio_data).mark_bar().encode(
        x="M√™s",
        y="Produ√ß√£o (Toneladas)",
        color="M√™s",
        tooltip=["Produ√ß√£o (Toneladas)", "Erros (Quantidade)"]
    )
    st.altair_chart(grafico_producao, use_container_width=True)

    st.subheader("üìâ Erros Mensais")
    grafico_erros = px.line(
        relatorio_data,
        x="M√™s",
        y="Erros (Quantidade)",
        markers=True,
        title="Redu√ß√£o de Erros ao Longo dos Meses",
        labels={"Erros (Quantidade)": "Quantidade de Erros"}
    )
    st.plotly_chart(grafico_erros)

# Finaliza√ß√£o
st.balloons()
st.markdown("""
    üéâ Obrigado por usar o sistema Amadelli Dashboard! Aproveite as funcionalidades e melhore continuamente sua experi√™ncia.
""")



